#+TITLE: .emacs --- Emacs init file
#+AUTHOR: Juri Linkov
#+EMAIL: juri@linkov.net
#+DATE: 2020-02-27
#+VERSION: GNU Emacs 27.0.50 (x86_64-pc-linux-gnu)
#+KEYWORDS: dotemacs, init
#+HTML_LINK_HOME: http://www.linkov.net/emacs
#+HTML_HEAD: <script type="text/javascript" src="load.js"></script>
#+ATTR_HTML: :target _blank
#+INFOJS_OPT: view:info toc:t
#+OPTIONS: broken-links:mark author:t creator:t timestamp:t email:t
#+PROPERTY: header-args:emacs-lisp :lexical yes

#+BEGIN_QUOTE
"/Show me your init file and I'll tell you who you are./" -- [[http://www.google.com/search?q=%22tell+you+who+you+are%22+intitle%3Aproverbs+site%3Awikiquote.org][old proverb]] slightly modified
#+END_QUOTE

/Copyright (C) 1989-2020  Juri Linkov <juri@linkov.net>/

* Table of Content                                                      :TOC:

* Literate programming

First of all, as you may already noticed, this file follows the paradigm
called [[https://en.wikipedia.org/wiki/Literate_programming][Literate programming]].  It is a text document that has both of these features:

1. Weaving: it is rendered to HTML while displayed either on GitLab/GitHub or when exported;
2. Tangling: the same document is executed during Emacs loading.
   One line of code that initiates loading is in the separate file [[file:init.el][init.el]].

This fits nicely into the definition of Emacs where Emacs is the
self-documenting editor, and this file is a self-documenting init file.

* Construction Kit

There are many different definitions what Emacs really is - some call it
Integrated Development Environment (IDE), some call it a Lisp machine, etc.
and all of them are right.  What definition would be more relevant in the
context of this configuration file is that Emacs not just an editor, but
the *Editor Construction Kit* - that means an editor creation system whose
blocks could be combined in infinitely many ways to build a completely new editor -
and not just an editor but anything possible: web browser, mail client, [[https://xkcd.com/378/][butterfly]]...
So Emacs is more like a UI framework.

And indeed, looking at different customizations, it's easy to notice that
none of them are like other editors based on the same Emacs core.
Their differences are so significant that it is hard to believe that they
come from the same source.

* Space-time optimization

While constructing an own editor, one of the most important goals is to
optimize it in both dimensions: in space and time.

Optimization of space means to make usage of screen space more optimal, and
optimization of time means to reduce time required to perform different tasks.

** Space optimization

By default, Emacs looks like a typical GUI application with the menu bar,
tool bar, scroll bars, etc.  The problem is that these nice-looking UI
elements occupy precious screen real estate.  Some parts of this configuration
deal with this problem by reclaiming unused space to maximize information
density on the screen.

*** Remove unused display elements

Get rid of all space-wasting garbage and minimize clutter.

#+begin_src emacs-lisp
(and (fboundp 'menu-bar-mode)   (menu-bar-mode   -1))
(and (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(and (fboundp 'tool-bar-mode)   (tool-bar-mode   -1))
(and (fboundp 'tooltip-mode) (fboundp 'x-show-tip) (tooltip-mode -1))
#+end_src

*** Full-screen Emacs desktop

** Time optimization

Time optimization mostly means less clanking on keyboard to save time
for more productive activities.

*** Shorter answers

Use single letters ~y~ or ~n~ for answers instead of complete words ~yes~ or ~no~.
A longer word was intended for cases where giving the wrong answer would
have serious consequences, but in reality with short answers you decide
how long a pause you need in order to realize what the question is about.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Don't spend time answering useless questions

Enable all disabled commands such as ~narrow-to-region~, etc.

#+begin_src emacs-lisp
(setq disabled-command-function nil)
#+end_src

* Most significant Emacs customizations
* Window management
* Efficient navigation in different modes and between buffers.
** Smart moves
** Lynx-like navigation in Info, Man, Dired, W3, W3M modes
* Disabled most of the default limitations.
* Improved many standard Emacs commands and modes.
* Added new functionality and new keybindings.

* Other

** No blinking

Blinking cursors are distracting - turn blink OFF:
here ~(*) (*) (*)~ indicates how cursor blinks.

#+begin_src emacs-lisp
(and (fboundp 'blink-cursor-mode) (blink-cursor-mode (- (*) (*) (*))))
#+end_src

* Local Variables :noexport:

~time-stamp~ in these local variables specifies the format
of the property =DATE= at the beginning of this file, so that
on saving it is updated automatically.

- Local Variables:
- eval: (add-hook 'before-save-hook 'time-stamp nil t)
- time-stamp-start: "DATE: "
- time-stamp-format: "%:y-%02m-%02d"
- time-stamp-end: "$"
- time-stamp-line-limit: 15
- End:
